


/* This example accompanies the books
   "Embedded Systems: Introduction to the MSP432 Microcontroller",
       ISBN: 978-1512185676, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Interfacing to the MSP432 Microcontroller",
       ISBN: 978-1514676585, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Operating Systems for ARM Cortex-M Microcontrollers",
       ISBN: 978-1466468863, , Jonathan Valvano, copyright (c) 2017
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/

Simplified BSD License (FreeBSD License)
Copyright (c) 2017, Jonathan Valvano, All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied, of the FreeBSD Project.
*/
// Negative logic bump sensors
// P8.7 Bump5
// P8.6 Bump4
// P8.5 Bump3
// P8.4 Bump2
// P8.3 Bump1
// P8.0 Bump0

// reflectance LED illuminate connected to P5.3
// reflectance sensor 1 connected to P7.0 (robot's right, robot off road to left)
// reflectance sensor 2 connected to P7.1
// reflectance sensor 3 connected to P7.2
// reflectance sensor 4 connected to P7.3 center
// reflectance sensor 5 connected to P7.4 center
// reflectance sensor 6 connected to P7.5
// reflectance sensor 7 connected to P7.6
// reflectance sensor 8 connected to P7.7 (robot's left, robot off road to right)

#include "msp.h"
#include "..\inc\bump.h"
#include "..\inc\Reflectance.h"
#include "..\inc\Clock.h"
#include "..\inc\SysTickInts.h"
#include "..\inc\CortexM.h"
#include "..\inc\LaunchPad.h"
#include "..\inc\TExaS.h"

#define GREEN 0x02

//void (*Port4Task)(uint_8);

volatile uint8_t reflectance_data, bump_data;
volatile uint32_t MainCount=0;
volatile uint8_t bumpState;

//Initialise GPIO Port2 registers
void Port2_Init(void){
  P2->SEL0 = 0x00;
  P2->SEL1 = 0x00;                        // configure P2.2-P2.0 as GPIO
  P2->DS = 0x07;                          // make P2.2-P2.0 high drive strength
  P2->DIR = 0x07;                         // make P2.2-P2.0 out
  P2->OUT = 0x00;                         // all LEDs off
}



void SysTick_Handler(void){ // every 1ms
    volatile static uint8_t count=0;
    if(count==0){
        Reflectance_Start();
    }
    else if (count==1) {
        reflectance_data =  Reflectance_End();
        bump_data = Bump_Read(); // Bump_Read() is declared in Bump.c, this function will
    }
    count++;
    if(count==10)count=0;
}

volatile uint8_t bitCount = 0;

uint8_t bitPosition(uint8_t n) {
    if (n == 0)
        return 0;  // no bits set

    // check if only one bit is set
    if (n & (n - 1))
        return 7;  // more than one bit set

    // exactly one bit set — find its index
    uint8_t pos = 1;
    while ((n >>= 1) != 0)
        pos++;

    return pos;  // 1-based position
}

void task(uint8_t bumpdata) {};

int main(void){

volatile uint8_t data_pins;

    Clock_Init48MHz();
    LaunchPad_Init();
    Bump_Init(&task);
    Reflectance_Init();
    TExaS_Init(LOGICANALYZER_P7);
    SysTick_Init(48000,1);  // set up SysTick for 1000 Hz interrupts
    EnableInterrupts();
    while(1){
      WaitForInterrupt();
      if(MainCount%1000 == 0)P2->OUT ^= 0x01; // foreground thread
      MainCount++;
      Port2_Init();
      P2->OUT = bitPosition(~bump_data & 0x3F);
    }
}

/*
void PORT4_IRQHandler(uint_8){
    (*Port4Task)(bump_Read());
    //P4->IFG=0x00;
}
*/

// Binary to Decimal
int bin2dec(const char* binary) {
    int decimal = 0;
    int base = 1;  // 2^0

    // Find length of string
    int len = 0;
    while (binary[len] != '\0') {
        len++;
    }

    // Process from right to left
    for (int i = len - 1; i >= 0; i--) {
        if (binary[i] == '1') {
            decimal += base;
        }
        base *= 2;
    }

    return decimal;
}

// Decimal to Binary
void dec2bin(int decimal, char* binary) {
    if (decimal == 0) {
        binary[0] = '0';
        binary[1] = '\0';
        return;
    }

    int index = 0;
    int temp = decimal;

    // Get digits in reverse
    while (temp > 0) {
        binary[index++] = (temp % 2) + '0';
        temp /= 2;
    }
    binary[index] = '\0';

    // Reverse the string
    int start = 0;
    int end = index - 1;
    while (start < end) {
        char tmp = binary[start];
        binary[start] = binary[end];
        binary[end] = tmp;
        start++;
        end--;
    }
}

// Decimal to Hexadecimal
void dec2hex(int decimal, char* hex) {
    if (decimal == 0) {
        hex[0] = '0';
        hex[1] = '\0';
        return;
    }

    const char hex_chars[] = "0123456789ABCDEF";
    int index = 0;
    int temp = decimal;

    // Get digits in reverse
    while (temp > 0) {
        hex[index++] = hex_chars[temp % 16];
        temp /= 16;
    }
    hex[index] = '\0';

    // Reverse the string
    int start = 0;
    int end = index - 1;
    while (start < end) {
        char tmp = hex[start];
        hex[start] = hex[end];
        hex[end] = tmp;
        start++;
        end--;
    }
}

// Hexadecimal to Decimal
int hex2dec(const char* hex) {
    int decimal = 0;
    int base = 1;  // 16^0

    // Find length of string
    int len = 0;
    while (hex[len] != '\0') {
        len++;
    }

    // Process from right to left
    for (int i = len - 1; i >= 0; i--) {
        char c = hex[i];
        int digit;

        if (c >= '0' && c <= '9') {
            digit = c - '0';
        } else if (c >= 'A' && c <= 'F') {
            digit = c - 'A' + 10;
        } else if (c >= 'a' && c <= 'f') {
            digit = c - 'a' + 10;
        } else {
            // Invalid character
            return -1;
        }

        decimal += digit * base;
        base *= 16;
    }

    return decimal;
}
