// IRDistance.c
// Runs on MSP432
// Provide mid-level functions that convert raw ADC
// values from the GP2Y0A21YK0F infrared distance sensors to
// distances in mm.
// Jonathan Valvano
// May 25, 2017

/* This example accompanies the books
   "Embedded Systems: Introduction to the MSP432 Microcontroller",
       ISBN: 978-1512185676, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Interfacing to the MSP432 Microcontroller",
       ISBN: 978-1514676585, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Operating Systems for ARM Cortex-M Microcontrollers",
       ISBN: 978-1466468863, , Jonathan Valvano, copyright (c) 2017
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/

Simplified BSD License (FreeBSD License)
Copyright (c) 2017, Jonathan Valvano, All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied, of the FreeBSD Project.
*/

// Pololu #3543 Vreg (5V regulator output) connected to all three Pololu #136 GP2Y0A21YK0F Vcc's (+5V) and MSP432 +5V (J3.21)
// Pololu #3543 Vreg (5V regulator output) connected to positive side of three 10 uF capacitors physically near the sensors
// Pololu ground connected to all three Pololu #136 GP2Y0A21YK0F grounds and MSP432 ground (J3.22)
// Pololu ground connected to negative side of all three 10 uF capacitors
// MSP432 P9.0 (J5) (analog input to MSP432) connected to right GP2Y0A21YK0F Vout
// MSP432 P4.1 (J1.5) (analog input to MSP432) connected to center GP2Y0A21YK0F Vout
// MSP432 P9.1 (J5) (analog input to MSP432) connected to left GP2Y0A21YK0F Vout

#include <stdint.h>
#include "../inc/ADC14.h"
#include "msp.h"

/* ========== CALIBRATION DATA ==========
 * EDIT THESE ARRAYS WITH YOUR MEASURED VALUES
 * Place objects at 3 known distances, measure the ADC values, then update these arrays
 */

/* Left sensor calibration data */
static int32_t CAL_Left_ADC[3]  = {6500, 3200, 2100};  /* EDIT: Your measured ADC values */
static int32_t CAL_Left_Dist[3] = {100, 300, 500};     /* EDIT: Actual distances in mm */

/* Center sensor calibration data */
static int32_t CAL_Center_ADC[3]  = {6800, 3400, 2200};  /* EDIT: Your measured ADC values */
static int32_t CAL_Center_Dist[3] = {100, 300, 500};     /* EDIT: Actual distances in mm */

/* Right sensor calibration data */
static int32_t CAL_Right_ADC[3]  = {6300, 3100, 2050};  /* EDIT: Your measured ADC values */
static int32_t CAL_Right_Dist[3] = {100, 300, 500};     /* EDIT: Actual distances in mm */


/* ========== CALIBRATION PARAMETERS ==========
 * Default values match original hardcoded formulas
 * Left:   length = 10*(90000/(nl-300))     => A=900000, B=-300,  C=0
 * Center: length = 10*(100000/(nc+900))    => A=1000000, B=900,  C=0
 * Right:  length = 10*(90000/(nr-700))     => A=900000, B=-700,  C=0
 */

static int32_t Left_A   = 900000;
static int32_t Left_B   = -300;
static int32_t Left_C   = 0;

//static int32_t Center_A = 1000000;
//static int32_t Center_B = 900;
//static int32_t Center_C = 0;
//
//static int32_t Right_A  = 900000;
//static int32_t Right_B  = -700;
//static int32_t Right_C  = 0;

static int32_t Center_A = 900000;
static int32_t Center_B = -300;
static int32_t Center_C = 0;

static int32_t Right_A  = 900000;
static int32_t Right_B  = -300;
static int32_t Right_C  = 0;


/* ========== HELPER FUNCTION FOR CALIBRATION ==========
 * Solve for A, B, C given 3 calibration points using iterative linearization.
 * Model: D = A/(n + B) + C
 *
 * @param adc  Array of 3 ADC readings
 * @param dist Array of 3 actual distances (mm)
 * @param A    Pointer to store calculated A parameter
 * @param B    Pointer to store calculated B parameter
 * @param C    Pointer to store calculated C parameter
 * @return 0 on success, -1 on failure
 */
static int32_t SolveCalibrationParams(int32_t adc[3], int32_t dist[3],
                                       int32_t *A, int32_t *B, int32_t *C) {
    int32_t C_guess;
    int32_t iterations;
    int32_t iter, i;
    int64_t sum_n, sum_y, sum_ny, sum_nn;
    int32_t D_adjusted;
    int64_t y, n;
    int64_t numerator, denominator;
    int64_t m, A_new, b, B_new;
    int64_t residual_sum;
    int32_t predicted;

    /* Check for invalid inputs */
    if (dist[0] <= 0 || dist[1] <= 0 || dist[2] <= 0) return -1;
    if (adc[0] == adc[1] || adc[1] == adc[2] || adc[0] == adc[2]) return -1;

    /* Iterative linearization method */
    /* Start with C = 0 guess */
    C_guess = 0;
    iterations = 5;  /* Usually converges in 2-3 iterations */

    for (iter = 0; iter < iterations; iter++) {
        /* Transform: y = 1/(D - C_guess), then y = (1/A)*n + (B/A) */
        /* This becomes linear regression: y = m*n + b, where m = 1/A, b = B/A */

        sum_n = 0;
        sum_y = 0;
        sum_ny = 0;
        sum_nn = 0;

        for (i = 0; i < 3; i++) {
            D_adjusted = dist[i] - C_guess;
            if (D_adjusted <= 0) {
                /* Adjust C_guess if it's too large */
                C_guess = dist[i] - 10;  /* Leave some margin */
                D_adjusted = 10;
            }

            /* y = 1/D_adjusted (scaled by 1000000 to avoid floating point) */
            y = (1000000LL * 1000) / D_adjusted;
            n = adc[i];

            sum_n  += n;
            sum_y  += y;
            sum_ny += n * y / 1000;  /* Scale down to prevent overflow */
            sum_nn += n * n;
        }

        /* Linear regression: m = (N*sum_xy - sum_x*sum_y) / (N*sum_xx - sum_x*sum_x) */
        numerator   = 3 * sum_ny - sum_n * sum_y / 1000;
        denominator = 3 * sum_nn - sum_n * sum_n;

        if (denominator == 0) return -1;

        m = (numerator * 1000) / denominator;  /* m = 1/A (scaled) */

        if (m == 0) return -1;

        /* A = 1/m */
        A_new = (1000000LL * 1000000) / m;

        /* b = (sum_y - m*sum_n) / N */
        b = (sum_y - m * sum_n / 1000) / 3;

        /* B = b * A */
        B_new = (b * A_new) / 1000000;

        /* Update C estimate: average residual */
        residual_sum = 0;
        for (i = 0; i < 3; i++) {
            predicted = (int32_t)(A_new / (adc[i] + B_new));
            residual_sum += (dist[i] - predicted);
        }
        C_guess = (int32_t)(residual_sum / 3);

        /* Store final values */
        *A = (int32_t)A_new;
        *B = (int32_t)B_new;
        *C = C_guess;
    }

    return 0;
}


/* ========== CALIBRATION FUNCTION ==========
// Usage:
// Edit the arrays at the top for nl, nc, nr values (from lab4)
// then simply run this function each time u want to use the calibrated values. if you do not run it, then it will use the default values.
CalibrateIRSensors();
*/
int32_t CalibrateIRSensors(void) {
    int32_t result;

    result = 0;

    /* Calibrate Left sensor */
    if (SolveCalibrationParams(CAL_Left_ADC, CAL_Left_Dist, &Left_A, &Left_B, &Left_C) != 0) {
        result = -1;
    }

    /* Calibrate Center sensor */
    if (SolveCalibrationParams(CAL_Center_ADC, CAL_Center_Dist, &Center_A, &Center_B, &Center_C) != 0) {
        result = -1;
    }

    /* Calibrate Right sensor */
    if (SolveCalibrationParams(CAL_Right_ADC, CAL_Right_Dist, &Right_A, &Right_B, &Right_C) != 0) {
        result = -1;
    }

    return result;
}


/* ========== CONVERSION FUNCTIONS ==========
 * Routine to convert Filtered Raw ADC values to distance data.
 * Uses calibrated 3-parameter model: D = A/(n + B) + C
 */
int32_t LeftConvert(int32_t nl){        /* returns left distance in mm */
    int32_t denominator;
    int32_t length;

    denominator = nl + Left_B;

    /* Avoid division by zero */
    if (denominator == 0) {
        return 5000;
    }

    length = Left_A / denominator + Left_C;

    /* Clamp to maximum */
    if (length >= 5000 || length < 0) {
        return 5000;
    }
    return length;
}

int32_t CenterConvert(int32_t nc){   /* returns center distance in mm */
    int32_t denominator;
    int32_t length;

    denominator = nc + Center_B;

    /* Avoid division by zero */
    if (denominator == 0) {
        return 5000;
    }

    length = Center_A / denominator + Center_C;

    /* Clamp to maximum */
    if (length >= 5000 || length < 0) {
        return 5000;
    }
    return length;
}

int32_t RightConvert(int32_t nr){      /* returns right distance in mm */
    int32_t denominator;
    int32_t length;

    denominator = nr + Right_B;

    /* Avoid division by zero */
    if (denominator == 0) {
        return 5000;
    }

    length = Right_A / denominator + Right_C;

    /* Clamp to maximum */
    if (length >= 5000 || length < 0) {
        return 5000;
    }
    return length;
}
